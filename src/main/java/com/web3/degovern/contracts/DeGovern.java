package com.web3.degovern.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple12;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DeGovern extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","26565b9350506060612fa988828901612d26565b925050608086013567ffffffffffffffff811115612fc657600080fd5b612fd288828901612b6a565b9150509295509295909350565b60008060008060808587031215612ff557600080fd5b600085013567ffffffffffffffff81111561300f57600080fd5b61301b87828801612b6a565b945050602085013567ffffffffffffffff81111561303857600080fd5b61304487828801612b6a565b935050604061305587828801612aec565b925050606061306687828801612d26565b91505092959194509250565b6000806000806080858703121561308857600080fd5b600085013567ffffffffffffffff8111156130a257600080fd5b6130ae87828801612bc0565b94505060206130bf87828801612d26565b93505060406130d087828801612d26565b92505060606130e187828801612d26565b91505092959194509250565b6000602082840312156130ff57600080fd5b600061310d84828501612d26565b91505092915050565b6000806040838503121561312957600080fd5b600061313785828601612d26565b925050602083013567ffffffffffffffff81111561315457600080fd5b61316085828601612b6a565b9150509250929050565b6000806040838503121561317d57600080fd5b600061318b85828601612d26565b925050602061319c85828601612d26565b9150509250929050565b6000806000606084860312156131bb57600080fd5b60006131c986828701612d26565b93505060206131da86828701612d26565b925050604084013567ffffffffffffffff8111156131f757600080fd5b61320386828701612b6a565b9150509250925092565b61321681613aac565b82525050565b600061322782613a59565b80845260208401935061323983613a32565b60005b8281101561326b5761324f8683516133de565b61325882613a85565b915060c08601955060018101905061323c565b50849250505092915050565b600061328282613a64565b8084526020840193508360208202850161329b85613a3f565b60005b848110156132d45783830388526132b68383516134d6565b92506132c182613a92565b915060208801975060018101905061329e565b508196508694505050505092915050565b60006132f082613a6f565b8084526020840193508360208202850161330985613a4c565b60005b84811015613342578383038852613324838351613539565b925061332f82613a9f565b915060208801975060018101905061330c565b508196508694505050505092915050565b61335c81613acc565b82525050565b61336b81613ad8565b82525050565b600061337c82613a7a565b808452613390816020860160208601613b31565b61339981613b64565b602085010191505092915050565b6000601182527f4572726f72207768656e207570646174650000000000000000000000000000006020830152604082019050919050565b60c0820160008201516133f4600085018261364b565b506020820151613407602085018261364b565b50604082015161341a604085018261320d565b50606082015161342d606085018261364b565b5060808201516134406080850182613353565b5060a082015161345360a085018261320d565b50505050565b600060a083016000830151613471600086018261364b565b50602083015184820360208601526134898282613371565b915050604083015184820360408601526134a38282613371565b91505060608301516134b8606086018261320d565b5060808301516134cb608086018261364b565b508091505092915050565b60006080830160008301516134ee6000860182613353565b506020830151613501602086018261364b565b50604083015184820360408601526135198282613371565b915050606083015161352e6060860182613353565b508091505092915050565b600061018083016000830151613552600086018261364b565b506020830151613565602086018261320d565b506040830151613578604086018261320d565b50606083015161358b6060860182613353565b50608083015184820360808601526135a38282613371565b91505060a083015184820360a08601526135bd8282613371565b91505060c083015184820360c08601526135d78282613371565b91505060e08301516135ec60e086018261364b565b5061010083015161360161010086018261364b565b5061012083015161361661012086018261364b565b5061014083015161362b61014086018261364b565b5061016083015161364061016086018261364b565b508091505092915050565b61365481613ae2565b82525050565b600060208201905061366f600083018461320d565b92915050565b6000602082019050818103600083015261368f818461321c565b905092915050565b600060208201905081810360008301526136b18184613277565b905092915050565b600060208201905081810360008301526136d381846132e5565b905092915050565b60006020820190506136f06000830184613353565b92915050565b600060808201905061370b6000830187613353565b613718602083018661364b565b818103604083015261372a8185613371565b90506137396060830184613353565b95945050505050565b6000602082019050818103600083015261375b816133a7565b9050919050565b6000602082019050818103600083015261377c8184613459565b905092915050565b6000602082019050613799600083018461364b565b92915050565b6000610180820190506137b5600083018f61364b565b6137c2602083018e61320d565b6137cf604083018d61320d565b6137dc606083018c613353565b81810360808301526137ee818b613371565b905081810360a0830152613802818a613371565b905081810360c08301526138168189613371565b905061382560e083018861364b565b61383361010083018761364b565b61384161012083018661364b565b61384f61014083018561364b565b61385d61016083018461364b565b9d9c50505050505050505050505050565b600060e082019050613883600083018a61364b565b81810360208301526138958189613371565b90506138a4604083018861320d565b6138b16060830187613362565b6138be608083018661364b565b81810360a08301526138d08185613371565b90506138df60c083018461364b565b98975050505050505050565b600060a082019050613900600083018861364b565b81810360208301526139128187613371565b905081810360408301526139268186613371565b9050613935606083018561320d565b613942608083018461364b565b9695505050505050565b600060c082019050613961600083018961364b565b61396e602083018861364b565b61397b604083018761320d565b613988606083018661364b565b6139956080830185613353565b6139a260a083018461320d565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156139d057600080fd5b8060405250919050565b600067ffffffffffffffff8211156139f157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115613a1d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613b4f578082015181840152602081019050613b34565b83811115613b5e576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582032699349cb12f031bbd99d946cb2fd19ad179992da82eed530f84d5b5bbf34df6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","2d27565b9350506060612faa88828901612d27565b925050608086013567ffffffffffffffff811115612fc757600080fd5b612fd388828901612b6b565b9150509295509295909350565b60008060008060808587031215612ff657600080fd5b600085013567ffffffffffffffff81111561301057600080fd5b61301c87828801612b6b565b945050602085013567ffffffffffffffff81111561303957600080fd5b61304587828801612b6b565b935050604061305687828801612aed565b925050606061306787828801612d27565b91505092959194509250565b6000806000806080858703121561308957600080fd5b600085013567ffffffffffffffff8111156130a357600080fd5b6130af87828801612bc1565b94505060206130c087828801612d27565b93505060406130d187828801612d27565b92505060606130e287828801612d27565b91505092959194509250565b60006020828403121561310057600080fd5b600061310e84828501612d27565b91505092915050565b6000806040838503121561312a57600080fd5b600061313885828601612d27565b925050602083013567ffffffffffffffff81111561315557600080fd5b61316185828601612b6b565b9150509250929050565b6000806040838503121561317e57600080fd5b600061318c85828601612d27565b925050602061319d85828601612d27565b9150509250929050565b6000806000606084860312156131bc57600080fd5b60006131ca86828701612d27565b93505060206131db86828701612d27565b925050604084013567ffffffffffffffff8111156131f857600080fd5b61320486828701612b6b565b9150509250925092565b61321781613aad565b82525050565b600061322882613a5a565b80845260208401935061323a83613a33565b60005b8281101561326c576132508683516133df565b61325982613a86565b915060c08601955060018101905061323d565b50849250505092915050565b600061328382613a65565b8084526020840193508360208202850161329c85613a40565b60005b848110156132d55783830388526132b78383516134d7565b92506132c282613a93565b915060208801975060018101905061329f565b508196508694505050505092915050565b60006132f182613a70565b8084526020840193508360208202850161330a85613a4d565b60005b8481101561334357838303885261332583835161353a565b925061333082613aa0565b915060208801975060018101905061330d565b508196508694505050505092915050565b61335d81613acd565b82525050565b61336c81613ad9565b82525050565b600061337d82613a7b565b808452613391816020860160208601613b32565b61339a81613b65565b602085010191505092915050565b6000601182527f4572726f72207768656e207570646174650000000000000000000000000000006020830152604082019050919050565b60c0820160008201516133f5600085018261364c565b506020820151613408602085018261364c565b50604082015161341b604085018261320e565b50606082015161342e606085018261364c565b5060808201516134416080850182613354565b5060a082015161345460a085018261320e565b50505050565b600060a083016000830151613472600086018261364c565b506020830151848203602086015261348a8282613372565b915050604083015184820360408601526134a48282613372565b91505060608301516134b9606086018261320e565b5060808301516134cc608086018261364c565b508091505092915050565b60006080830160008301516134ef6000860182613354565b506020830151613502602086018261364c565b506040830151848203604086015261351a8282613372565b915050606083015161352f6060860182613354565b508091505092915050565b600061018083016000830151613553600086018261364c565b506020830151613566602086018261320e565b506040830151613579604086018261320e565b50606083015161358c6060860182613354565b50608083015184820360808601526135a48282613372565b91505060a083015184820360a08601526135be8282613372565b91505060c083015184820360c08601526135d88282613372565b91505060e08301516135ed60e086018261364c565b5061010083015161360261010086018261364c565b5061012083015161361761012086018261364c565b5061014083015161362c61014086018261364c565b5061016083015161364161016086018261364c565b508091505092915050565b61365581613ae3565b82525050565b6000602082019050613670600083018461320e565b92915050565b60006020820190508181036000830152613690818461321d565b905092915050565b600060208201905081810360008301526136b28184613278565b905092915050565b600060208201905081810360008301526136d481846132e6565b905092915050565b60006020820190506136f16000830184613354565b92915050565b600060808201905061370c6000830187613354565b613719602083018661364c565b818103604083015261372b8185613372565b905061373a6060830184613354565b95945050505050565b6000602082019050818103600083015261375c816133a8565b9050919050565b6000602082019050818103600083015261377d818461345a565b905092915050565b600060208201905061379a600083018461364c565b92915050565b6000610180820190506137b6600083018f61364c565b6137c3602083018e61320e565b6137d0604083018d61320e565b6137dd606083018c613354565b81810360808301526137ef818b613372565b905081810360a0830152613803818a613372565b905081810360c08301526138178189613372565b905061382660e083018861364c565b61383461010083018761364c565b61384261012083018661364c565b61385061014083018561364c565b61385e61016083018461364c565b9d9c50505050505050505050505050565b600060e082019050613884600083018a61364c565b81810360208301526138968189613372565b90506138a5604083018861320e565b6138b26060830187613363565b6138bf608083018661364c565b81810360a08301526138d18185613372565b90506138e060c083018461364c565b98975050505050505050565b600060a082019050613901600083018861364c565b81810360208301526139138187613372565b905081810360408301526139278186613372565b9050613936606083018561320e565b613943608083018461364c565b9695505050505050565b600060c082019050613962600083018961364c565b61396f602083018861364c565b61397c604083018761320e565b613989606083018661364c565b6139966080830185613354565b6139a360a083018461320e565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156139d157600080fd5b8060405250919050565b600067ffffffffffffffff8211156139f257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115613a1e57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613b50578082015181840152602081019050613b35565b83811115613b5f576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820a7cf96d5dddf61c41a608f8a753530d65d40a72fc8bb11a066f88c9fbd0fcb4e6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"controllerAddress\",\"type\":\"address\"},{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"},{\"name\":\"pk\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"selectEvent\",\"outputs\":[{\"components\":[{\"name\":\"eventType\",\"type\":\"bool\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"isUsed\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DAOs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"DAOContract\",\"type\":\"address\"},{\"name\":\"reputationBaseline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"login\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"proposal\",\"type\":\"tuple\"},{\"name\":\"DAOid\",\"type\":\"uint256\"},{\"name\":\"userID\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DAOid\",\"type\":\"uint256\"}],\"name\":\"selectDAOInfo\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"DAOContract\",\"type\":\"address\"},{\"name\":\"reputationBaseline\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"password\",\"type\":\"bytes32\"},{\"name\":\"reputation\",\"type\":\"uint256\"},{\"name\":\"pk\",\"type\":\"string\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"selectBallot\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DAOid\",\"type\":\"uint256\"}],\"name\":\"selectProposal\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDAOsNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"name\":\"eventType\",\"type\":\"bool\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"isUsed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"rep\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setRep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"Baseline\",\"type\":\"uint256\"}],\"name\":\"createDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"DAOid\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"checkStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":\"bool\"}],\"name\":\"setEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"bool\"},{\"name\":\"userID\",\"type\":\"uint256\"},{\"name\":\"DAOid\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ballotsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"proposalAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPGRADECONTRACT = "upgradeContract";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETUSERID = "getUserID";

    public static final String FUNC_SELECTEVENT = "selectEvent";

    public static final String FUNC_DAOS = "DAOs";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_SELECTDAOINFO = "selectDAOInfo";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_SELECTBALLOT = "selectBallot";

    public static final String FUNC_SELECTPROPOSAL = "selectProposal";

    public static final String FUNC_PROPOSALSLENGTH = "proposalsLength";

    public static final String FUNC_GETDAOSNUM = "getDAOsNum";

    public static final String FUNC_EVENTS = "events";

    public static final String FUNC_SETREP = "setRep";

    public static final String FUNC_PROPOSALS = "proposals";

    public static final String FUNC_CREATEDAO = "createDAO";

    public static final String FUNC_CHECKSTATUS = "checkStatus";

    public static final String FUNC_SETEVENT = "setEvent";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_BALLOTSLENGTH = "ballotsLength";

    public static final String FUNC_GETUSERSNUM = "getUsersNum";

    public static final String FUNC_BALLOTS = "ballots";

    protected DeGovern(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt upgradeContract(String controllerAddress, String newAddress) {
        final Function function = new Function(
                FUNC_UPGRADECONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(controllerAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] upgradeContract(String controllerAddress, String newAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPGRADECONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(controllerAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpgradeContract(String controllerAddress, String newAddress) {
        final Function function = new Function(
                FUNC_UPGRADECONTRACT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(controllerAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(newAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUpgradeContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPGRADECONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt register(String userAddress, String userName, String password, String pk) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String userAddress, String userName, String password, String pk, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String userAddress, String userName, String password, String pk) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public BigInteger getUserID(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<Struct0> selectEvent(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_SELECTEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple5<BigInteger, String, String, String, BigInteger> DAOs(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_DAOS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<BigInteger, String, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public TransactionReceipt login(BigInteger id, String password) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] login(BigInteger id, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLogin(BigInteger id, String password) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposal(Struct1 proposal, BigInteger DAOid, BigInteger userID, BigInteger time) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createProposal(Struct1 proposal, BigInteger DAOid, BigInteger userID, BigInteger time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(Struct1 proposal, BigInteger DAOid, BigInteger userID, BigInteger time) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<Struct1, BigInteger, BigInteger, BigInteger> getCreateProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<Struct1, BigInteger, BigInteger, BigInteger>(

                (Struct1) results.get(0), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Struct2 selectDAOInfo(BigInteger DAOid) throws ContractException {
        final Function function = new Function(FUNC_SELECTDAOINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct2>() {}));
        return executeCallWithSingleValueReturn(function, Struct2.class);
    }

    public Tuple7<BigInteger, String, String, byte[], BigInteger, String, BigInteger> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, String, byte[], BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public DynamicArray<Struct3> selectBallot(BigInteger proposalID) throws ContractException {
        final Function function = new Function(FUNC_SELECTBALLOT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct3>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<Struct1> selectProposal(BigInteger DAOid) throws ContractException {
        final Function function = new Function(FUNC_SELECTPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct1>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public BigInteger proposalsLength() throws ContractException {
        final Function function = new Function(FUNC_PROPOSALSLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getDAOsNum() throws ContractException {
        final Function function = new Function(FUNC_GETDAOSNUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple4<Boolean, BigInteger, String, Boolean> events(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_EVENTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<Boolean, BigInteger, String, Boolean>(
                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue());
    }

    public TransactionReceipt setRep(String userAddress, BigInteger rep, BigInteger level) {
        final Function function = new Function(
                FUNC_SETREP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rep), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setRep(String userAddress, BigInteger rep, BigInteger level, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETREP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rep), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRep(String userAddress, BigInteger rep, BigInteger level) {
        final Function function = new Function(
                FUNC_SETREP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(rep), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getSetRepInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETREP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple12<BigInteger, String, String, Boolean, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> proposals(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_PROPOSALS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple12<BigInteger, String, String, Boolean, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue(), 
                (BigInteger) results.get(9).getValue(), 
                (BigInteger) results.get(10).getValue(), 
                (BigInteger) results.get(11).getValue());
    }

    public TransactionReceipt createDAO(String name, String content, String contractAddress, BigInteger Baseline) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createDAO(String name, String content, String contractAddress, BigInteger Baseline, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateDAO(String name, String content, String contractAddress, BigInteger Baseline) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getCreateDAOInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEDAO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getCreateDAOOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEDAO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt checkStatus(BigInteger proposalID, BigInteger DAOid, String time) {
        final Function function = new Function(
                FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] checkStatus(BigInteger proposalID, BigInteger DAOid, String time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckStatus(BigInteger proposalID, BigInteger DAOid, String time) {
        final Function function = new Function(
                FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getCheckStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setEvent(String userAddress, BigInteger level, String time, Boolean eventType) {
        final Function function = new Function(
                FUNC_SETEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(eventType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setEvent(String userAddress, BigInteger level, String time, Boolean eventType, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(eventType)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetEvent(String userAddress, BigInteger level, String time, Boolean eventType) {
        final Function function = new Function(
                FUNC_SETEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(eventType)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, Boolean> getSetEventInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEVENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, Boolean>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue()
                );
    }

    public TransactionReceipt vote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID, String time) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] vote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID, String time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID, String time) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<Boolean, BigInteger, BigInteger, BigInteger, String> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<Boolean, BigInteger, BigInteger, BigInteger, String>(

                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<Boolean> getVoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger ballotsLength() throws ContractException {
        final Function function = new Function(FUNC_BALLOTSLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getUsersNum() throws ContractException {
        final Function function = new Function(FUNC_GETUSERSNUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple6<BigInteger, BigInteger, String, BigInteger, Boolean, String> ballots(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_BALLOTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, String, BigInteger, Boolean, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (Boolean) results.get(4).getValue(), 
                (String) results.get(5).getValue());
    }

    public static DeGovern load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new DeGovern(contractAddress, client, credential);
    }

    public static DeGovern deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(DeGovern.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public Boolean eventType;

        public BigInteger level;

        public String time;

        public Boolean isUsed;

        public Struct0(Bool eventType, Uint256 level, Utf8String time, Bool isUsed) {
            super(eventType,level,time,isUsed);
            this.eventType = eventType.getValue();
            this.level = level.getValue();
            this.time = time.getValue();
            this.isUsed = isUsed.getValue();
        }

        public Struct0(Boolean eventType, BigInteger level, String time, Boolean isUsed) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Bool(eventType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time),new org.fisco.bcos.sdk.abi.datatypes.Bool(isUsed));
            this.eventType = eventType;
            this.level = level;
            this.time = time;
            this.isUsed = isUsed;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public BigInteger id;

        public String proposalAddress;

        public String userAddress;

        public Boolean isContract;

        public String proposalName;

        public String proposalContent;

        public String status;

        public BigInteger yes;

        public BigInteger no;

        public BigInteger voter;

        public BigInteger start;

        public BigInteger stop;

        public Struct1(Uint256 id, Address proposalAddress, Address userAddress, Bool isContract, Utf8String proposalName, Utf8String proposalContent, Utf8String status, Uint256 yes, Uint256 no, Uint256 voter, Uint256 start, Uint256 stop) {
            super(id,proposalAddress,userAddress,isContract,proposalName,proposalContent,status,yes,no,voter,start,stop);
            this.id = id.getValue();
            this.proposalAddress = proposalAddress.getValue();
            this.userAddress = userAddress.getValue();
            this.isContract = isContract.getValue();
            this.proposalName = proposalName.getValue();
            this.proposalContent = proposalContent.getValue();
            this.status = status.getValue();
            this.yes = yes.getValue();
            this.no = no.getValue();
            this.voter = voter.getValue();
            this.start = start.getValue();
            this.stop = stop.getValue();
        }

        public Struct1(BigInteger id, String proposalAddress, String userAddress, Boolean isContract, String proposalName, String proposalContent, String status, BigInteger yes, BigInteger no, BigInteger voter, BigInteger start, BigInteger stop) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Address(proposalAddress),new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),new org.fisco.bcos.sdk.abi.datatypes.Bool(isContract),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(proposalName),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(proposalContent),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(yes),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(no),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(voter),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(stop));
            this.id = id;
            this.proposalAddress = proposalAddress;
            this.userAddress = userAddress;
            this.isContract = isContract;
            this.proposalName = proposalName;
            this.proposalContent = proposalContent;
            this.status = status;
            this.yes = yes;
            this.no = no;
            this.voter = voter;
            this.start = start;
            this.stop = stop;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public BigInteger id;

        public String name;

        public String content;

        public String DAOContract;

        public BigInteger reputationBaseline;

        public Struct2(Uint256 id, Utf8String name, Utf8String content, Address DAOContract, Uint256 reputationBaseline) {
            super(id,name,content,DAOContract,reputationBaseline);
            this.id = id.getValue();
            this.name = name.getValue();
            this.content = content.getValue();
            this.DAOContract = DAOContract.getValue();
            this.reputationBaseline = reputationBaseline.getValue();
        }

        public Struct2(BigInteger id, String name, String content, String DAOContract, BigInteger reputationBaseline) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content),new org.fisco.bcos.sdk.abi.datatypes.Address(DAOContract),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputationBaseline));
            this.id = id;
            this.name = name;
            this.content = content;
            this.DAOContract = DAOContract;
            this.reputationBaseline = reputationBaseline;
        }
    }

    public static class Struct3 extends DynamicStruct {
        public BigInteger id;

        public BigInteger proposalID;

        public String userAddress;

        public BigInteger vote;

        public Boolean choice;

        public String proposalAddress;

        public Struct3(Uint256 id, Uint256 proposalID, Address userAddress, Uint256 vote, Bool choice, Address proposalAddress) {
            super(id,proposalID,userAddress,vote,choice,proposalAddress);
            this.id = id.getValue();
            this.proposalID = proposalID.getValue();
            this.userAddress = userAddress.getValue();
            this.vote = vote.getValue();
            this.choice = choice.getValue();
            this.proposalAddress = proposalAddress.getValue();
        }

        public Struct3(BigInteger id, BigInteger proposalID, String userAddress, BigInteger vote, Boolean choice, String proposalAddress) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID),new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(vote),new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),new org.fisco.bcos.sdk.abi.datatypes.Address(proposalAddress));
            this.id = id;
            this.proposalID = proposalID;
            this.userAddress = userAddress;
            this.vote = vote;
            this.choice = choice;
            this.proposalAddress = proposalAddress;
        }
    }
}
