package com.web3.degovern.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple12;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DeGovern extends Contract {
    public static final String[] BINARY_ARRAY = {"","805460018160011615610100020316600290048015610ff55780601f10610fca57610100808354040283529160200191610ff5565b820191906000526020600020905b815481529060010190602001808311610fd857829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015490806004015490806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110c55780601f1061109a576101008083540402835291602001916110c5565b820191906000526020600020905b8154815290600101906020018083116110a857829003601f168201915b5050505050908060060154905087565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611222578382906000526020600020906005020160c0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061110a565b505050509050919050565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561157f57838290600052602060002090600b02016101806040519081016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16151515158152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113f15780601f106113c6576101008083540402835291602001916113f1565b820191906000526020600020905b8154815290600101906020018083116113d457829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114935780601f1061146857610100808354040283529160200191611493565b820191906000526020600020905b81548152906001019060200180831161147657829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115355780601f1061150a57610100808354040283529160200191611535565b820191906000526020600020905b81548152906001019060200180831161151857829003601f168201915b5050505050815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152505081526020019060010190611262565b505050509050919050565b60065481565b6000600280549050905090565b600080600090506002848154811015156115b357fe5b9060005260206000209060050201600401546001848154811015156115d457fe5b9060005260206000209060070201600401541015156118075760056000858152602001908152602001600020805490508560000181815250506040805190810160405280600981526020017fe68a95e7a5a8e4b8ad00000000000000000000000000000000000000000000008152508560c0018190525042856101400181815250504262015180600187600001510102018561016001818152505060056000858152602001908152602001600020859080600181540180825580915050906001820390600052602060002090600b0201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160030190805190602001906117829291906127e2565b5060a082015181600401908051906020019061179f9291906127e2565b5060c08201518160050190805190602001906117bc9291906127e2565b5060e0820151816006015561010082015181600701556101208201518160080155610140820151816009015561016082015181600a0155505050600160065401600681905550600190505b809150509392505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160018281548110151561186657fe5b906000526020600020906007020160040181905550505050565b60008061188b6128a8565b6000915060028581548110151561189e57fe5b9060005260206000209060050201600401546001878154811015156118bf57fe5b906000526020600020906007020160040154101515611d0457611ad56001878154811015156118ea57fe5b906000526020600020906007020160e0604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119a75780601f1061197c576101008083540402835291602001916119a7565b820191906000526020600020905b81548152906001019060200180831161198a57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201546000191660001916815260200160048201548152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611abb5780601f10611a9057610100808354040283529160200191611abb565b820191906000526020600020905b815481529060010190602001808311611a9e57829003601f168201915b5050505050815260200160068201548152505088866126b7565b90506001600854016008819055506007600085815260200190815260200160002080549050816000018181525050806080015115611b4c5780606001516005600087815260200190815260200160002085815481101515611b3257fe5b90600052602060002090600b020160060181905550611b87565b80606001516005600087815260200190815260200160002085815481101515611b7157fe5b90600052602060002090600b0201600701819055505b60016005600087815260200190815260200160002085815481101515611ba957fe5b90600052602060002090600b020160080154016005600087815260200190815260200160002085815481101515611bdc57fe5b90600052602060002090600b020160080181905550600760008581526020019081526020016000208190806001815401808255809150509060018203906000526020600020906005020160009091929091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050600191505b8192505050949350505050565b600460205281600052604060002081815481101515611d2c57fe5b9060005260206000209060040201600091509150508060000160009054906101000a900460ff1690806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611df25780601f10611dc757610100808354040283529160200191611df2565b820191906000526020600020905b815481529060010190602001808311611dd557829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b6060600080611e1e8585612736565b15611fe5576005600085815260200190815260200160002085815481101515611e4357fe5b90600052602060002090600b02016006015491506005600085815260200190815260200160002085815481101515611e7757fe5b90600052602060002090600b020160070154905080821115611f13576040805190810160405280600981526020017fe5b7b2e9809ae8bf8700000000000000000000000000000000000000000000008152506005600086815260200190815260200160002086815481101515611ee957fe5b90600052602060002090600b02016005019080519060200190611f0d92919061290d565b50611fe4565b6005600085815260200190815260200160002085815481101515611f3357fe5b90600052602060002090600b02016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fd85780601f10","","9f85828601612c19565b9250506020612fb085828601612c19565b9150509250929050565b612fc38161384a565b82525050565b6000612fd4826137ec565b808452602084019350612fe6836137c5565b60005b8281101561301857612ffc86835161318a565b61300582613823565b915060c086019550600181019050612fe9565b50849250505092915050565b600061302f826137f7565b80845260208401935083602082028501613048856137d2565b60005b84811015613081578383038852613063838351613282565b925061306e82613830565b915060208801975060018101905061304b565b508196508694505050505092915050565b600061309d82613802565b808452602084019350836020820285016130b6856137df565b60005b848110156130ef5783830388526130d18383516132e5565b92506130dc8261383d565b91506020880197506001810190506130b9565b508196508694505050505092915050565b6131098161386a565b82525050565b61311881613876565b82525050565b600061312982613818565b80845261313d8160208601602086016138cf565b61314681613902565b602085010191505092915050565b600061315f8261380d565b8084526131738160208601602086016138cf565b61317c81613902565b602085010191505092915050565b60c0820160008201516131a060008501826133f7565b5060208201516131b360208501826133f7565b5060408201516131c66040850182612fba565b5060608201516131d960608501826133f7565b5060808201516131ec6080850182613100565b5060a08201516131ff60a0850182612fba565b50505050565b600060a08301600083015161321d60008601826133f7565b50602083015184820360208601526132358282613154565b9150506040830151848203604086015261324f8282613154565b91505060608301516132646060860182612fba565b50608083015161327760808601826133f7565b508091505092915050565b600060808301600083015161329a6000860182613100565b5060208301516132ad60208601826133f7565b50604083015184820360408601526132c58282613154565b91505060608301516132da6060860182613100565b508091505092915050565b6000610180830160008301516132fe60008601826133f7565b5060208301516133116020860182612fba565b5060408301516133246040860182612fba565b5060608301516133376060860182613100565b506080830151848203608086015261334f8282613154565b91505060a083015184820360a08601526133698282613154565b91505060c083015184820360c08601526133838282613154565b91505060e083015161339860e08601826133f7565b506101008301516133ad6101008601826133f7565b506101208301516133c26101208601826133f7565b506101408301516133d76101408601826133f7565b506101608301516133ec6101608601826133f7565b508091505092915050565b61340081613880565b82525050565b600060208201905081810360008301526134208184612fc9565b905092915050565b600060208201905081810360008301526134428184613024565b905092915050565b600060208201905081810360008301526134648184613092565b905092915050565b60006020820190506134816000830184613100565b92915050565b600060808201905061349c6000830187613100565b6134a960208301866133f7565b81810360408301526134bb8185613154565b90506134ca6060830184613100565b95945050505050565b600060208201905081810360008301526134ed818461311e565b905092915050565b6000602082019050818103600083015261350f8184613205565b905092915050565b600060208201905061352c60008301846133f7565b92915050565b600061018082019050613548600083018f6133f7565b613555602083018e612fba565b613562604083018d612fba565b61356f606083018c613100565b8181036080830152613581818b613154565b905081810360a0830152613595818a613154565b905081810360c08301526135a98189613154565b90506135b860e08301886133f7565b6135c66101008301876133f7565b6135d46101208301866133f7565b6135e26101408301856133f7565b6135f06101608301846133f7565b9d9c50505050505050505050505050565b600060e082019050613616600083018a6133f7565b81810360208301526136288189613154565b90506136376040830188612fba565b613644606083018761310f565b61365160808301866133f7565b81810360a08301526136638185613154565b905061367260c08301846133f7565b98975050505050505050565b600060a08201905061369360008301886133f7565b81810360208301526136a58187613154565b905081810360408301526136b98186613154565b90506136c86060830185612fba565b6136d560808301846133f7565b9695505050505050565b600060c0820190506136f460008301896133f7565b61370160208301886133f7565b61370e6040830187612fba565b61371b60608301866133f7565b6137286080830185613100565b61373560a0830184612fba565b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561376357600080fd5b8060405250919050565b600067ffffffffffffffff82111561378457600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156137b057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156138ed5780820151818401526020810190506138d2565b838111156138fc576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582047721c30634fdcd6192e4d66c589155641dea51f1bfca5319a3747631c193c616c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","9f85828601612c19565b9250506020612fb085828601612c19565b9150509250929050565b612fc38161384a565b82525050565b6000612fd4826137ec565b808452602084019350612fe6836137c5565b60005b8281101561301857612ffc86835161318a565b61300582613823565b915060c086019550600181019050612fe9565b50849250505092915050565b600061302f826137f7565b80845260208401935083602082028501613048856137d2565b60005b84811015613081578383038852613063838351613282565b925061306e82613830565b915060208801975060018101905061304b565b508196508694505050505092915050565b600061309d82613802565b808452602084019350836020820285016130b6856137df565b60005b848110156130ef5783830388526130d18383516132e5565b92506130dc8261383d565b91506020880197506001810190506130b9565b508196508694505050505092915050565b6131098161386a565b82525050565b61311881613876565b82525050565b600061312982613818565b80845261313d8160208601602086016138cf565b61314681613902565b602085010191505092915050565b600061315f8261380d565b8084526131738160208601602086016138cf565b61317c81613902565b602085010191505092915050565b60c0820160008201516131a060008501826133f7565b5060208201516131b360208501826133f7565b5060408201516131c66040850182612fba565b5060608201516131d960608501826133f7565b5060808201516131ec6080850182613100565b5060a08201516131ff60a0850182612fba565b50505050565b600060a08301600083015161321d60008601826133f7565b50602083015184820360208601526132358282613154565b9150506040830151848203604086015261324f8282613154565b91505060608301516132646060860182612fba565b50608083015161327760808601826133f7565b508091505092915050565b600060808301600083015161329a6000860182613100565b5060208301516132ad60208601826133f7565b50604083015184820360408601526132c58282613154565b91505060608301516132da6060860182613100565b508091505092915050565b6000610180830160008301516132fe60008601826133f7565b5060208301516133116020860182612fba565b5060408301516133246040860182612fba565b5060608301516133376060860182613100565b506080830151848203608086015261334f8282613154565b91505060a083015184820360a08601526133698282613154565b91505060c083015184820360c08601526133838282613154565b91505060e083015161339860e08601826133f7565b506101008301516133ad6101008601826133f7565b506101208301516133c26101208601826133f7565b506101408301516133d76101408601826133f7565b506101608301516133ec6101608601826133f7565b508091505092915050565b61340081613880565b82525050565b600060208201905081810360008301526134208184612fc9565b905092915050565b600060208201905081810360008301526134428184613024565b905092915050565b600060208201905081810360008301526134648184613092565b905092915050565b60006020820190506134816000830184613100565b92915050565b600060808201905061349c6000830187613100565b6134a960208301866133f7565b81810360408301526134bb8185613154565b90506134ca6060830184613100565b95945050505050565b600060208201905081810360008301526134ed818461311e565b905092915050565b6000602082019050818103600083015261350f8184613205565b905092915050565b600060208201905061352c60008301846133f7565b92915050565b600061018082019050613548600083018f6133f7565b613555602083018e612fba565b613562604083018d612fba565b61356f606083018c613100565b8181036080830152613581818b613154565b905081810360a0830152613595818a613154565b905081810360c08301526135a98189613154565b90506135b860e08301886133f7565b6135c66101008301876133f7565b6135d46101208301866133f7565b6135e26101408301856133f7565b6135f06101608301846133f7565b9d9c50505050505050505050505050565b600060e082019050613616600083018a6133f7565b81810360208301526136288189613154565b90506136376040830188612fba565b613644606083018761310f565b61365160808301866133f7565b81810360a08301526136638185613154565b905061367260c08301846133f7565b98975050505050505050565b600060a08201905061369360008301886133f7565b81810360208301526136a58187613154565b905081810360408301526136b98186613154565b90506136c86060830185612fba565b6136d560808301846133f7565b9695505050505050565b600060c0820190506136f460008301896133f7565b61370160208301886133f7565b61370e6040830187612fba565b61371b60608301866133f7565b6137286080830185613100565b61373560a0830184612fba565b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561376357600080fd5b8060405250919050565b600067ffffffffffffffff82111561378457600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156137b057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156138ed5780820151818401526020810190506138d2565b838111156138fc576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820786b25157e2ba1f13372fee692147a35ba37b525ea6c7f9cf8777b9d1197e32c6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setIsUsed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"},{\"name\":\"pk\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"reputation\",\"type\":\"uint256\"}],\"name\":\"updateReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"selectEvent\",\"outputs\":[{\"components\":[{\"name\":\"eventType\",\"type\":\"bool\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"isUsed\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DAOs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"DAOContract\",\"type\":\"address\"},{\"name\":\"reputationBaseline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"login\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DAOid\",\"type\":\"uint256\"}],\"name\":\"selectDAOInfo\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"DAOContract\",\"type\":\"address\"},{\"name\":\"reputationBaseline\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"password\",\"type\":\"bytes32\"},{\"name\":\"reputation\",\"type\":\"uint256\"},{\"name\":\"pk\",\"type\":\"string\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"selectBallot\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DAOid\",\"type\":\"uint256\"}],\"name\":\"selectProposal\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDAOsNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"proposal\",\"type\":\"tuple\"},{\"name\":\"DAOid\",\"type\":\"uint256\"},{\"name\":\"userID\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setRep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"bool\"},{\"name\":\"userID\",\"type\":\"uint256\"},{\"name\":\"DAOid\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"name\":\"eventType\",\"type\":\"bool\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"isUsed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"DAOid\",\"type\":\"uint256\"}],\"name\":\"checkStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"Baseline\",\"type\":\"uint256\"}],\"name\":\"createDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ballotsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"setEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"proposalAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SETISUSED = "setIsUsed";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_UPDATEREPUTATION = "updateReputation";

    public static final String FUNC_GETUSERID = "getUserID";

    public static final String FUNC_SELECTEVENT = "selectEvent";

    public static final String FUNC_DAOS = "DAOs";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_SELECTDAOINFO = "selectDAOInfo";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_SELECTBALLOT = "selectBallot";

    public static final String FUNC_SELECTPROPOSAL = "selectProposal";

    public static final String FUNC_PROPOSALSLENGTH = "proposalsLength";

    public static final String FUNC_GETDAOSNUM = "getDAOsNum";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_SETREP = "setRep";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_EVENTS = "events";

    public static final String FUNC_CHECKSTATUS = "checkStatus";

    public static final String FUNC_PROPOSALS = "proposals";

    public static final String FUNC_CREATEDAO = "createDAO";

    public static final String FUNC_BALLOTSLENGTH = "ballotsLength";

    public static final String FUNC_SETEVENT = "setEvent";

    public static final String FUNC_GETUSERSNUM = "getUsersNum";

    public static final String FUNC_BALLOTS = "ballots";

    protected DeGovern(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt setIsUsed(String userAddress, BigInteger id) {
        final Function function = new Function(
                FUNC_SETISUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setIsUsed(String userAddress, BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETISUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetIsUsed(String userAddress, BigInteger id) {
        final Function function = new Function(
                FUNC_SETISUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetIsUsedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETISUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt register(String userAddress, String userName, String password, String pk) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String userAddress, String userName, String password, String pk, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String userAddress, String userName, String password, String pk) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt updateReputation(BigInteger id, BigInteger reputation) {
        final Function function = new Function(
                FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateReputation(BigInteger id, BigInteger reputation, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateReputation(BigInteger id, BigInteger reputation) {
        final Function function = new Function(
                FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getUpdateReputationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getUpdateReputationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getUserID(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<Struct0> selectEvent(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_SELECTEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple5<BigInteger, String, String, String, BigInteger> DAOs(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_DAOS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<BigInteger, String, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public TransactionReceipt login(BigInteger id, String password) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] login(BigInteger id, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLogin(BigInteger id, String password) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Struct1 selectDAOInfo(BigInteger DAOid) throws ContractException {
        final Function function = new Function(FUNC_SELECTDAOINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
        return executeCallWithSingleValueReturn(function, Struct1.class);
    }

    public Tuple7<BigInteger, String, String, byte[], BigInteger, String, BigInteger> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, String, byte[], BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public DynamicArray<Struct2> selectBallot(BigInteger proposalID) throws ContractException {
        final Function function = new Function(FUNC_SELECTBALLOT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct2>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<Struct3> selectProposal(BigInteger DAOid) throws ContractException {
        final Function function = new Function(FUNC_SELECTPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct3>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public BigInteger proposalsLength() throws ContractException {
        final Function function = new Function(FUNC_PROPOSALSLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getDAOsNum() throws ContractException {
        final Function function = new Function(FUNC_GETDAOSNUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt createProposal(Struct3 proposal, BigInteger DAOid, BigInteger userID) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createProposal(Struct3 proposal, BigInteger DAOid, BigInteger userID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(Struct3 proposal, BigInteger DAOid, BigInteger userID) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<Struct3, BigInteger, BigInteger> getCreateProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct3>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Struct3, BigInteger, BigInteger>(

                (Struct3) results.get(0), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setRep(String userAddress, BigInteger num) {
        final Function function = new Function(
                FUNC_SETREP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setRep(String userAddress, BigInteger num, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETREP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRep(String userAddress, BigInteger num) {
        final Function function = new Function(
                FUNC_SETREP, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetRepInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETREP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt vote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] vote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<Boolean, BigInteger, BigInteger, BigInteger> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<Boolean, BigInteger, BigInteger, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getVoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple4<Boolean, BigInteger, String, Boolean> events(String param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_EVENTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<Boolean, BigInteger, String, Boolean>(
                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue());
    }

    public TransactionReceipt checkStatus(BigInteger proposalID, BigInteger DAOid) {
        final Function function = new Function(
                FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] checkStatus(BigInteger proposalID, BigInteger DAOid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckStatus(BigInteger proposalID, BigInteger DAOid) {
        final Function function = new Function(
                FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getCheckStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<String> getCheckStatusOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple12<BigInteger, String, String, Boolean, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> proposals(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_PROPOSALS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple12<BigInteger, String, String, Boolean, String, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue(), 
                (BigInteger) results.get(9).getValue(), 
                (BigInteger) results.get(10).getValue(), 
                (BigInteger) results.get(11).getValue());
    }

    public TransactionReceipt createDAO(String name, String content, String contractAddress, BigInteger Baseline) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createDAO(String name, String content, String contractAddress, BigInteger Baseline, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateDAO(String name, String content, String contractAddress, BigInteger Baseline) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getCreateDAOInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEDAO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getCreateDAOOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEDAO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger ballotsLength() throws ContractException {
        final Function function = new Function(FUNC_BALLOTSLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setEvent(String userAddress, BigInteger level, String time) {
        final Function function = new Function(
                FUNC_SETEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setEvent(String userAddress, BigInteger level, String time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetEvent(String userAddress, BigInteger level, String time) {
        final Function function = new Function(
                FUNC_SETEVENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getSetEventInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEVENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public BigInteger getUsersNum() throws ContractException {
        final Function function = new Function(FUNC_GETUSERSNUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple6<BigInteger, BigInteger, String, BigInteger, Boolean, String> ballots(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_BALLOTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, String, BigInteger, Boolean, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (Boolean) results.get(4).getValue(), 
                (String) results.get(5).getValue());
    }

    public static DeGovern load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new DeGovern(contractAddress, client, credential);
    }

    public static DeGovern deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(DeGovern.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public Boolean eventType;

        public BigInteger level;

        public String time;

        public Boolean isUsed;

        public Struct0(Bool eventType, Uint256 level, Utf8String time, Bool isUsed) {
            super(eventType,level,time,isUsed);
            this.eventType = eventType.getValue();
            this.level = level.getValue();
            this.time = time.getValue();
            this.isUsed = isUsed.getValue();
        }

        public Struct0(Boolean eventType, BigInteger level, String time, Boolean isUsed) {
            super(new org.fisco.bcos.sdk.abi.datatypes.Bool(eventType),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(time),new org.fisco.bcos.sdk.abi.datatypes.Bool(isUsed));
            this.eventType = eventType;
            this.level = level;
            this.time = time;
            this.isUsed = isUsed;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public BigInteger id;

        public String name;

        public String content;

        public String DAOContract;

        public BigInteger reputationBaseline;

        public Struct1(Uint256 id, Utf8String name, Utf8String content, Address DAOContract, Uint256 reputationBaseline) {
            super(id,name,content,DAOContract,reputationBaseline);
            this.id = id.getValue();
            this.name = name.getValue();
            this.content = content.getValue();
            this.DAOContract = DAOContract.getValue();
            this.reputationBaseline = reputationBaseline.getValue();
        }

        public Struct1(BigInteger id, String name, String content, String DAOContract, BigInteger reputationBaseline) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content),new org.fisco.bcos.sdk.abi.datatypes.Address(DAOContract),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputationBaseline));
            this.id = id;
            this.name = name;
            this.content = content;
            this.DAOContract = DAOContract;
            this.reputationBaseline = reputationBaseline;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public BigInteger id;

        public BigInteger proposalID;

        public String userAddress;

        public BigInteger vote;

        public Boolean choice;

        public String proposalAddress;

        public Struct2(Uint256 id, Uint256 proposalID, Address userAddress, Uint256 vote, Bool choice, Address proposalAddress) {
            super(id,proposalID,userAddress,vote,choice,proposalAddress);
            this.id = id.getValue();
            this.proposalID = proposalID.getValue();
            this.userAddress = userAddress.getValue();
            this.vote = vote.getValue();
            this.choice = choice.getValue();
            this.proposalAddress = proposalAddress.getValue();
        }

        public Struct2(BigInteger id, BigInteger proposalID, String userAddress, BigInteger vote, Boolean choice, String proposalAddress) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID),new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(vote),new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),new org.fisco.bcos.sdk.abi.datatypes.Address(proposalAddress));
            this.id = id;
            this.proposalID = proposalID;
            this.userAddress = userAddress;
            this.vote = vote;
            this.choice = choice;
            this.proposalAddress = proposalAddress;
        }
    }

    public static class Struct3 extends DynamicStruct {
        public BigInteger id;

        public String proposalAddress;

        public String userAddress;

        public Boolean isContract;

        public String proposalName;

        public String proposalContent;

        public String status;

        public BigInteger yes;

        public BigInteger no;

        public BigInteger voter;

        public BigInteger start;

        public BigInteger stop;

        public Struct3(Uint256 id, Address proposalAddress, Address userAddress, Bool isContract, Utf8String proposalName, Utf8String proposalContent, Utf8String status, Uint256 yes, Uint256 no, Uint256 voter, Uint256 start, Uint256 stop) {
            super(id,proposalAddress,userAddress,isContract,proposalName,proposalContent,status,yes,no,voter,start,stop);
            this.id = id.getValue();
            this.proposalAddress = proposalAddress.getValue();
            this.userAddress = userAddress.getValue();
            this.isContract = isContract.getValue();
            this.proposalName = proposalName.getValue();
            this.proposalContent = proposalContent.getValue();
            this.status = status.getValue();
            this.yes = yes.getValue();
            this.no = no.getValue();
            this.voter = voter.getValue();
            this.start = start.getValue();
            this.stop = stop.getValue();
        }

        public Struct3(BigInteger id, String proposalAddress, String userAddress, Boolean isContract, String proposalName, String proposalContent, String status, BigInteger yes, BigInteger no, BigInteger voter, BigInteger start, BigInteger stop) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Address(proposalAddress),new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),new org.fisco.bcos.sdk.abi.datatypes.Bool(isContract),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(proposalName),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(proposalContent),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(yes),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(no),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(voter),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(stop));
            this.id = id;
            this.proposalAddress = proposalAddress;
            this.userAddress = userAddress;
            this.isContract = isContract;
            this.proposalName = proposalName;
            this.proposalContent = proposalContent;
            this.status = status;
            this.yes = yes;
            this.no = no;
            this.voter = voter;
            this.start = start;
            this.stop = stop;
        }
    }
}
