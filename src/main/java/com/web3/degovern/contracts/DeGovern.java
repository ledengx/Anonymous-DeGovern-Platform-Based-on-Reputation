package com.web3.degovern.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple11;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DeGovern extends Contract {
    public static final String[] BINARY_ARRAY = {"","","505092959194509250565b60008060008060808587031215611fc057600080fd5b600085013567ffffffffffffffff811115611fda57600080fd5b611fe687828801611caf565b945050602085013567ffffffffffffffff81111561200357600080fd5b61200f87828801611caf565b935050604061202087828801611c31565b925050606061203187828801611f33565b91505092959194509250565b60008060006060848603121561205257600080fd5b600084013567ffffffffffffffff81111561206c57600080fd5b61207886828701611d05565b935050602061208986828701611f33565b925050604061209a86828701611f33565b9150509250925092565b6000602082840312156120b657600080fd5b600082013567ffffffffffffffff8111156120d057600080fd5b6120dc84828501611e3d565b91505092915050565b6000602082840312156120f757600080fd5b600061210584828501611f33565b91505092915050565b6000806040838503121561212157600080fd5b600061212f85828601611f33565b925050602083013567ffffffffffffffff81111561214c57600080fd5b61215885828601611caf565b9150509250929050565b6000806040838503121561217557600080fd5b600061218385828601611f33565b925050602061219485828601611f33565b9150509250929050565b6121a7816127cd565b82525050565b60006121b882612792565b8084526020840193506121ca83612778565b60005b828110156121fc576121e08683516122bb565b6121e9826127b3565b915060c0860195506001810190506121cd565b50849250505092915050565b60006122138261279d565b8084526020840193508360208202850161222c85612785565b60005b84811015612265578383038852612247838351612336565b9250612252826127c0565b915060208801975060018101905061222f565b508196508694505050505092915050565b61227f816127ed565b82525050565b6000612290826127a8565b8084526122a4816020860160208601612848565b6122ad8161287b565b602085010191505092915050565b60c0820160008201516122d1600085018261242c565b5060208201516122e4602085018261242c565b5060408201516122f7604085018261219e565b50606082015161230a606085018261242c565b50608082015161231d6080850182612276565b5060a082015161233060a085018261219e565b50505050565b60006101608301600083015161234f600086018261242c565b506020830151612362602086018261219e565b5060408301516123756040860182612276565b506060830151848203606086015261238d8282612285565b915050608083015184820360808601526123a78282612285565b91505060a08301516123bc60a0860182612276565b5060c08301516123cf60c086018261242c565b5060e08301516123e260e086018261242c565b506101008301516123f761010086018261242c565b5061012083015161240c61012086018261242c565b5061014083015161242161014086018261242c565b508091505092915050565b612435816127f9565b82525050565b6000602082019050818103600083015261245581846121ad565b905092915050565b600060208201905081810360008301526124778184612208565b905092915050565b60006020820190506124946000830184612276565b92915050565b60006020820190506124af600083018461242c565b92915050565b6000610160820190506124cb600083018e61242c565b6124d8602083018d61219e565b6124e5604083018c612276565b81810360608301526124f7818b612285565b9050818103608083015261250b818a612285565b905061251a60a0830189612276565b61252760c083018861242c565b61253460e083018761242c565b61254261010083018661242c565b61255061012083018561242c565b61255e61014083018461242c565b9c9b505050505050505050505050565b600061010082019050612584600083018b61242c565b612591602083018a61219e565b81810360408301526125a38189612285565b90506125b2606083018861242c565b6125bf608083018761242c565b6125cc60a083018661242c565b81810360c08301526125de8185612285565b90506125ed60e083018461242c565b9998505050505050505050565b600060a08201905061260f600083018861242c565b81810360208301526126218187612285565b905081810360408301526126358186612285565b9050612644606083018561219e565b612651608083018461242c565b9695505050505050565b600060c082019050612670600083018961242c565b61267d602083018861242c565b61268a604083018761219e565b612697606083018661242c565b6126a46080830185612276565b6126b160a083018461219e565b979650505050505050565b60006060820190506126d1600083018661242c565b6126de602083018561242c565b6126eb604083018461242c565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561271657600080fd5b8060405250919050565b600067ffffffffffffffff82111561273757600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561276357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561286657808201518184015260208101905061284b565b83811115612875576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582088481a925dbe5417c8eda060007fb45572415b2bdd20ed4e1b0585f4915ed0b26c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a900460ff161515151581526020016004820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610f70565b505050509050919050565b6002818154811015156110a257fe5b9060005260206000209060050201600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111545780601f1061112957610100808354040283529160200191611154565b820191906000526020600020905b81548152906001019060200180831161113757829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111f25780601f106111c7576101008083540402835291602001916111f2565b820191906000526020600020905b8154815290600101906020018083116111d557829003601f168201915b5050505050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154905085565b8160018281548110151561123857fe5b9060005260206000209060080201600401540160018281548110151561125a57fe5b9060005260206000209060080201600401819055505050565b606060036000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156114e857838290600052602060002090600a02016101606040519081016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113e15780601f106113b6576101008083540402835291602001916113e1565b820191906000526020600020905b8154815290600101906020018083116113c457829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114835780601f1061145857610100808354040283529160200191611483565b820191906000526020600020905b81548152906001019060200180831161146657829003601f168201915b505050505081526020016004820160009054906101000a900460ff1615151515815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982015481525050815260200190600101906112a8565b505050509050919050565b60018181548110151561150257fe5b90600052602060002090600802016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115da5780601f106115af576101008083540402835291602001916115da565b820191906000526020600020905b8154815290600101906020018083116115bd57829003601f168201915b505050505090806003015490806004015490806005015490806006018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561168a5780601f1061165f5761010080835404028352916020019161168a565b820191906000526020600020905b81548152906001019060200180831161166d57829003601f168201915b5050505050908060070154905088565b6000600180549050826000018181525050600182908060018154018082558091505090600182039060005260206000209060080201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190611746929190611b28565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006019080519060200190611781929190611b28565b5060e0820151816007015550505081600001519050919050565b816001828154811015156117ab57fe5b906000526020600020906008020160050154016001828154811015156117cd57fe5b9060005260206000209060080201600501819055505050565b6000816001848154811015156117f857fe5b9060005260206000209060080201600301819055506001905092915050565b6000806000905060028481548110151561182d57fe5b90600052602060002090600502016004015460018481548110151561184e57fe5b906000526020600020906008020160030154101515611a0357600360008581526020019081526020016000208054905085600001818152505060008560a001901515908115158152505042856101200181815250504262015180600187600001510102018561014001818152505060036000858152602001908152602001600020859080600181540180825580915050906001820390600052602060002090600a0201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019080519060200190611988929190611b28565b5060808201518160030190805190602001906119a5929190611b28565b5060a08201518160040160006101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060155610100820151816007015561012082015181600801556101408201518160090155505050600190505b809150509392505050565b60008060008091506003600085815260200190815260200160002085815481101515611a3657fe5b90600052602060002090600a02016009015490508042101515611a5857600191505b819250505092915050565b611a6b611ba8565b611a73611ba8565b82816020018181525050838160800190151590811515815250508460e001518160600181815250508460200151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050809150509392505050565b60a060405190810160405280600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b6957805160ff1916838001178555611b97565b82800160010185558215611b97579182015b82811115611b96578251825591602001919060010190611b7b565b5b509050611ba49190611c0d565b5090565b60c0604051908101604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b611c2f91905b80821115611c2b576000816000905550600101611c13565b5090565b90565b6000611c3e8235612804565b905092915050565b6000611c528235612824565b905092915050565b600082601f8301121515611c6d57600080fd5b8135611c80611c7b82612721565b6126f4565b91508082526020830160208301858383011115611c9c57600080fd5b611ca783828461283a565b50505092915050565b600082601f8301121515611cc357600080fd5b8135611cd6611cd18261274d565b6126f4565b91508082526020830160208301858383011115611cf257600080fd5b611cfd83828461283a565b50505092915050565b60006101608284031215611d1957600080fd5b611d246101606126f4565b90506000611d3484828501611f34565b6000830152506020611d4884828501611c32565b6020830152506040611d5c84828501611c46565b604083015250606082013567ffffffffffffffff811115611d7c57600080fd5b611d8884828501611c5a565b606083015250608082013567ffffffffffffffff811115611da857600080fd5b611db484828501611c5a565b60808301525060a0611dc884828501611c46565b60a08301525060c0611ddc84828501611f34565b60c08301525060e0611df084828501611f34565b60e083015250610100611e0584828501611f34565b61010083015250610120611e1b84828501611f34565b61012083015250610140611e3184828501611f34565b6101408301525092915050565b60006101008284031215611e5157600080fd5b611e5c6101006126f4565b90506000611e6c84828501611f34565b6000830152506020611e8084828501611c32565b602083015250604082013567ffffffffffffffff811115611ea057600080fd5b611eac84828501611c5a565b6040830152506060611ec084828501611f34565b6060830152506080611ed484828501611f34565b60808301525060a0611ee884828501611f34565b60a08301525060c082013567ffffffffffffffff811115611f0857600080fd5b611f1484828501611c5a565b60c08301525060e0611f2884828501611f34565b60e08301525092915050565b6000611f408235612830565b905092915050565b60008060008060808587031215611f5e57600080fd5b6000611f6c87828801611c46565b9450506020611f7d87828801611f34565b9350506040611f8e87828801611f34565b9250506060611f9f87828801611f34565b","91505092959194509250565b60008060008060808587031215611fc157600080fd5b600085013567ffffffffffffffff811115611fdb57600080fd5b611fe787828801611cb0565b945050602085013567ffffffffffffffff81111561200457600080fd5b61201087828801611cb0565b935050604061202187828801611c32565b925050606061203287828801611f34565b91505092959194509250565b60008060006060848603121561205357600080fd5b600084013567ffffffffffffffff81111561206d57600080fd5b61207986828701611d06565b935050602061208a86828701611f34565b925050604061209b86828701611f34565b9150509250925092565b6000602082840312156120b757600080fd5b600082013567ffffffffffffffff8111156120d157600080fd5b6120dd84828501611e3e565b91505092915050565b6000602082840312156120f857600080fd5b600061210684828501611f34565b91505092915050565b6000806040838503121561212257600080fd5b600061213085828601611f34565b925050602083013567ffffffffffffffff81111561214d57600080fd5b61215985828601611cb0565b9150509250929050565b6000806040838503121561217657600080fd5b600061218485828601611f34565b925050602061219585828601611f34565b9150509250929050565b6121a8816127ce565b82525050565b60006121b982612793565b8084526020840193506121cb83612779565b60005b828110156121fd576121e18683516122bc565b6121ea826127b4565b915060c0860195506001810190506121ce565b50849250505092915050565b60006122148261279e565b8084526020840193508360208202850161222d85612786565b60005b84811015612266578383038852612248838351612337565b9250612253826127c1565b9150602088019750600181019050612230565b508196508694505050505092915050565b612280816127ee565b82525050565b6000612291826127a9565b8084526122a5816020860160208601612849565b6122ae8161287c565b602085010191505092915050565b60c0820160008201516122d2600085018261242d565b5060208201516122e5602085018261242d565b5060408201516122f8604085018261219f565b50606082015161230b606085018261242d565b50608082015161231e6080850182612277565b5060a082015161233160a085018261219f565b50505050565b600061016083016000830151612350600086018261242d565b506020830151612363602086018261219f565b5060408301516123766040860182612277565b506060830151848203606086015261238e8282612286565b915050608083015184820360808601526123a88282612286565b91505060a08301516123bd60a0860182612277565b5060c08301516123d060c086018261242d565b5060e08301516123e360e086018261242d565b506101008301516123f861010086018261242d565b5061012083015161240d61012086018261242d565b5061014083015161242261014086018261242d565b508091505092915050565b612436816127fa565b82525050565b6000602082019050818103600083015261245681846121ae565b905092915050565b600060208201905081810360008301526124788184612209565b905092915050565b60006020820190506124956000830184612277565b92915050565b60006020820190506124b0600083018461242d565b92915050565b6000610160820190506124cc600083018e61242d565b6124d9602083018d61219f565b6124e6604083018c612277565b81810360608301526124f8818b612286565b9050818103608083015261250c818a612286565b905061251b60a0830189612277565b61252860c083018861242d565b61253560e083018761242d565b61254361010083018661242d565b61255161012083018561242d565b61255f61014083018461242d565b9c9b505050505050505050505050565b600061010082019050612585600083018b61242d565b612592602083018a61219f565b81810360408301526125a48189612286565b90506125b3606083018861242d565b6125c0608083018761242d565b6125cd60a083018661242d565b81810360c08301526125df8185612286565b90506125ee60e083018461242d565b9998505050505050505050565b600060a082019050612610600083018861242d565b81810360208301526126228187612286565b905081810360408301526126368186612286565b9050612645606083018561219f565b612652608083018461242d565b9695505050505050565b600060c082019050612671600083018961242d565b61267e602083018861242d565b61268b604083018761219f565b612698606083018661242d565b6126a56080830185612277565b6126b260a083018461219f565b979650505050505050565b60006060820190506126d2600083018661242d565b6126df602083018561242d565b6126ec604083018461242d565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561271757600080fd5b8060405250919050565b600067ffffffffffffffff82111561273857600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561276457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561286757808201518184015260208101905061284c565b83811115612876576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582012046bdb8f83abf5adcd4da22aeb134b94ae0420ac718aabe06f1542724188866c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"reputation\",\"type\":\"uint256\"},{\"name\":\"trustEvent\",\"type\":\"uint256\"},{\"name\":\"distrustEvent\",\"type\":\"uint256\"},{\"name\":\"pk\",\"type\":\"string\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"createUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"reputation\",\"type\":\"uint256\"}],\"name\":\"updateReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"userID\",\"type\":\"uint256\"}],\"name\":\"setDisTrust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DAOs\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"DAOContract\",\"type\":\"address\"},{\"name\":\"reputationBaseline\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"pk\",\"type\":\"string\"}],\"name\":\"login\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"reputation\",\"type\":\"uint256\"},{\"name\":\"trustEvent\",\"type\":\"uint256\"},{\"name\":\"distrustEvent\",\"type\":\"uint256\"},{\"name\":\"pk\",\"type\":\"string\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"selectBallot\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"DAOid\",\"type\":\"uint256\"}],\"name\":\"selectProposal\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"isPass\",\"type\":\"bool\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"DAOid\",\"type\":\"uint256\"}],\"name\":\"checkPass\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"bool\"},{\"name\":\"userID\",\"type\":\"uint256\"},{\"name\":\"DAOid\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"},{\"name\":\"userID\",\"type\":\"uint256\"}],\"name\":\"setTrust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"isPass\",\"type\":\"bool\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"proposal\",\"type\":\"tuple\"},{\"name\":\"DAOid\",\"type\":\"uint256\"},{\"name\":\"userID\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalAddress\",\"type\":\"address\"},{\"name\":\"isContract\",\"type\":\"bool\"},{\"name\":\"proposalName\",\"type\":\"string\"},{\"name\":\"proposalContent\",\"type\":\"string\"},{\"name\":\"isPass\",\"type\":\"bool\"},{\"name\":\"yes\",\"type\":\"uint256\"},{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"voter\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"stop\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"Baseline\",\"type\":\"uint256\"}],\"name\":\"createDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRepData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"proposalID\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"vote\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"proposalAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_CREATEUSER = "createUser";

    public static final String FUNC_UPDATEREPUTATION = "updateReputation";

    public static final String FUNC_SETDISTRUST = "setDisTrust";

    public static final String FUNC_DAOS = "DAOs";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_SELECTBALLOT = "selectBallot";

    public static final String FUNC_SELECTPROPOSAL = "selectProposal";

    public static final String FUNC_CHECKPASS = "checkPass";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_SETTRUST = "setTrust";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_PROPOSALS = "proposals";

    public static final String FUNC_CREATEDAO = "createDAO";

    public static final String FUNC_GETREPDATA = "getRepData";

    public static final String FUNC_BALLOTS = "ballots";

    protected DeGovern(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt createUser(Struct0 user) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(user), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createUser(Struct0 user, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(user), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateUser(Struct0 user) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(user), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Struct0> getCreateUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Struct0>(

                (Struct0) results.get(0)
                );
    }

    public Tuple1<BigInteger> getCreateUserOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateReputation(BigInteger id, BigInteger reputation) {
        final Function function = new Function(
                FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateReputation(BigInteger id, BigInteger reputation, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateReputation(BigInteger id, BigInteger reputation) {
        final Function function = new Function(
                FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputation)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getUpdateReputationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getUpdateReputationOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEREPUTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setDisTrust(BigInteger num, BigInteger userID) {
        final Function function = new Function(
                FUNC_SETDISTRUST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setDisTrust(BigInteger num, BigInteger userID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETDISTRUST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetDisTrust(BigInteger num, BigInteger userID) {
        final Function function = new Function(
                FUNC_SETDISTRUST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getSetDisTrustInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDISTRUST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple5<BigInteger, String, String, String, BigInteger> DAOs(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_DAOS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<BigInteger, String, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public TransactionReceipt login(BigInteger id, String pk) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] login(BigInteger id, String pk, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForLogin(BigInteger id, String pk) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getLoginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getLoginOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_LOGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple8<BigInteger, String, String, BigInteger, BigInteger, BigInteger, String, BigInteger> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, String, String, BigInteger, BigInteger, BigInteger, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public DynamicArray<Struct1> selectBallot(BigInteger proposalID) throws ContractException {
        final Function function = new Function(FUNC_SELECTBALLOT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct1>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<Struct2> selectProposal(BigInteger DAOid) throws ContractException {
        final Function function = new Function(FUNC_SELECTPROPOSAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct2>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt checkPass(BigInteger proposalID, BigInteger DAOid) {
        final Function function = new Function(
                FUNC_CHECKPASS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] checkPass(BigInteger proposalID, BigInteger DAOid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECKPASS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheckPass(BigInteger proposalID, BigInteger DAOid) {
        final Function function = new Function(
                FUNC_CHECKPASS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getCheckPassInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECKPASS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCheckPassOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECKPASS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt vote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] vote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(Boolean _choice, BigInteger userID, BigInteger DAOid, BigInteger proposalID) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_choice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<Boolean, BigInteger, BigInteger, BigInteger> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<Boolean, BigInteger, BigInteger, BigInteger>(

                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getVoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setTrust(BigInteger num, BigInteger userID) {
        final Function function = new Function(
                FUNC_SETTRUST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTrust(BigInteger num, BigInteger userID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTRUST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTrust(BigInteger num, BigInteger userID) {
        final Function function = new Function(
                FUNC_SETTRUST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getSetTrustInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTRUST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt createProposal(Struct2 proposal, BigInteger DAOid, BigInteger userID) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createProposal(Struct2 proposal, BigInteger DAOid, BigInteger userID, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal(Struct2 proposal, BigInteger DAOid, BigInteger userID) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(proposal, 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(DAOid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<Struct2, BigInteger, BigInteger> getCreateProposalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct2>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<Struct2, BigInteger, BigInteger>(

                (Struct2) results.get(0), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple11<BigInteger, String, Boolean, String, String, Boolean, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> proposals(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_PROPOSALS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple11<BigInteger, String, Boolean, String, String, Boolean, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (Boolean) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (BigInteger) results.get(8).getValue(), 
                (BigInteger) results.get(9).getValue(), 
                (BigInteger) results.get(10).getValue());
    }

    public TransactionReceipt createDAO(String name, String content, String contractAddress, BigInteger Baseline) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createDAO(String name, String content, String contractAddress, BigInteger Baseline, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateDAO(String name, String content, String contractAddress, BigInteger Baseline) {
        final Function function = new Function(
                FUNC_CREATEDAO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(content), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(contractAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(Baseline)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getCreateDAOInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEDAO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getCreateDAOOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEDAO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getRepData(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETREPDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public Tuple6<BigInteger, BigInteger, String, BigInteger, Boolean, String> ballots(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_BALLOTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, String, BigInteger, Boolean, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (Boolean) results.get(4).getValue(), 
                (String) results.get(5).getValue());
    }

    public static DeGovern load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new DeGovern(contractAddress, client, credential);
    }

    public static DeGovern deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(DeGovern.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public BigInteger id;

        public String userAddress;

        public String userName;

        public BigInteger reputation;

        public BigInteger trustEvent;

        public BigInteger distrustEvent;

        public String pk;

        public BigInteger level;

        public Struct0(Uint256 id, Address userAddress, Utf8String userName, Uint256 reputation, Uint256 trustEvent, Uint256 distrustEvent, Utf8String pk, Uint256 level) {
            super(id,userAddress,userName,reputation,trustEvent,distrustEvent,pk,level);
            this.id = id.getValue();
            this.userAddress = userAddress.getValue();
            this.userName = userName.getValue();
            this.reputation = reputation.getValue();
            this.trustEvent = trustEvent.getValue();
            this.distrustEvent = distrustEvent.getValue();
            this.pk = pk.getValue();
            this.level = level.getValue();
        }

        public Struct0(BigInteger id, String userAddress, String userName, BigInteger reputation, BigInteger trustEvent, BigInteger distrustEvent, String pk, BigInteger level) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(userName),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reputation),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(trustEvent),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(distrustEvent),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pk),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(level));
            this.id = id;
            this.userAddress = userAddress;
            this.userName = userName;
            this.reputation = reputation;
            this.trustEvent = trustEvent;
            this.distrustEvent = distrustEvent;
            this.pk = pk;
            this.level = level;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public BigInteger id;

        public BigInteger proposalID;

        public String userAddress;

        public BigInteger vote;

        public Boolean choice;

        public String proposalAddress;

        public Struct1(Uint256 id, Uint256 proposalID, Address userAddress, Uint256 vote, Bool choice, Address proposalAddress) {
            super(id,proposalID,userAddress,vote,choice,proposalAddress);
            this.id = id.getValue();
            this.proposalID = proposalID.getValue();
            this.userAddress = userAddress.getValue();
            this.vote = vote.getValue();
            this.choice = choice.getValue();
            this.proposalAddress = proposalAddress.getValue();
        }

        public Struct1(BigInteger id, BigInteger proposalID, String userAddress, BigInteger vote, Boolean choice, String proposalAddress) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(proposalID),new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(vote),new org.fisco.bcos.sdk.abi.datatypes.Bool(choice),new org.fisco.bcos.sdk.abi.datatypes.Address(proposalAddress));
            this.id = id;
            this.proposalID = proposalID;
            this.userAddress = userAddress;
            this.vote = vote;
            this.choice = choice;
            this.proposalAddress = proposalAddress;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public BigInteger id;

        public String proposalAddress;

        public Boolean isContract;

        public String proposalName;

        public String proposalContent;

        public Boolean isPass;

        public BigInteger yes;

        public BigInteger no;

        public BigInteger voter;

        public BigInteger start;

        public BigInteger stop;

        public Struct2(Uint256 id, Address proposalAddress, Bool isContract, Utf8String proposalName, Utf8String proposalContent, Bool isPass, Uint256 yes, Uint256 no, Uint256 voter, Uint256 start, Uint256 stop) {
            super(id,proposalAddress,isContract,proposalName,proposalContent,isPass,yes,no,voter,start,stop);
            this.id = id.getValue();
            this.proposalAddress = proposalAddress.getValue();
            this.isContract = isContract.getValue();
            this.proposalName = proposalName.getValue();
            this.proposalContent = proposalContent.getValue();
            this.isPass = isPass.getValue();
            this.yes = yes.getValue();
            this.no = no.getValue();
            this.voter = voter.getValue();
            this.start = start.getValue();
            this.stop = stop.getValue();
        }

        public Struct2(BigInteger id, String proposalAddress, Boolean isContract, String proposalName, String proposalContent, Boolean isPass, BigInteger yes, BigInteger no, BigInteger voter, BigInteger start, BigInteger stop) {
            super(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(id),new org.fisco.bcos.sdk.abi.datatypes.Address(proposalAddress),new org.fisco.bcos.sdk.abi.datatypes.Bool(isContract),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(proposalName),new org.fisco.bcos.sdk.abi.datatypes.Utf8String(proposalContent),new org.fisco.bcos.sdk.abi.datatypes.Bool(isPass),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(yes),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(no),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(voter),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(start),new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(stop));
            this.id = id;
            this.proposalAddress = proposalAddress;
            this.isContract = isContract;
            this.proposalName = proposalName;
            this.proposalContent = proposalContent;
            this.isPass = isPass;
            this.yes = yes;
            this.no = no;
            this.voter = voter;
            this.start = start;
            this.stop = stop;
        }
    }
}
