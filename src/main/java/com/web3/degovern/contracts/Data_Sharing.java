package com.web3.degovern.contracts;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Data_Sharing extends Contract {
    public static final String[] BINARY_ARRAY = {"","ffffffffff811115610c2957600080fd5b610c3585828601610b65565b925050602083013567ffffffffffffffff811115610c5257600080fd5b610c5e85828601610b65565b9150509250929050565b610c7181610d4e565b82525050565b6000610c8282610d43565b808452610c96816020860160208601610d69565b610c9f81610d9c565b602085010191505092915050565b6000602082019050610cc26000830184610c68565b92915050565b60006020820190508181036000830152610ce28184610c77565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610d0d57600080fd5b8060405250919050565b600067ffffffffffffffff821115610d2e57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b60008115159050919050565b82818337600083830152505050565b60005b83811015610d87578082015181840152602081019050610d6c565b83811115610d96576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058206759a2eb761439733c01844f1ebe5feabbb29d5c14f9bcb95bc62f95b759225d6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffffffff811115610c2957600080fd5b610c3585828601610b65565b925050602083013567ffffffffffffffff811115610c5257600080fd5b610c5e85828601610b65565b9150509250929050565b610c7181610d4e565b82525050565b6000610c8282610d43565b808452610c96816020860160208601610d69565b610c9f81610d9c565b602085010191505092915050565b6000602082019050610cc26000830184610c68565b92915050565b60006020820190508181036000830152610ce28184610c77565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610d0d57600080fd5b8060405250919050565b600067ffffffffffffffff821115610d2e57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b60008115159050919050565b82818337600083830152505050565b60005b83811015610d87578082015181840152602081019050610d6c565b83811115610d96576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203c42c3f42d3ca10ae50daea07d1b83d412eb15b54f08e49fd6bef03bbafeeb2c6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"attributes\",\"type\":\"string\"}],\"name\":\"Get_Data\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"Publish_Data\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"setData\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"port\",\"type\":\"string\"},{\"name\":\"user\",\"type\":\"string\"}],\"name\":\"Route_protect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"attributes\",\"type\":\"string\"}],\"name\":\"Access_Control\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"string\"}],\"name\":\"Route_Attack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GET_DATA = "Get_Data";

    public static final String FUNC_PUBLISH_DATA = "Publish_Data";

    public static final String FUNC_SETDATA = "setData";

    public static final String FUNC_ROUTE_PROTECT = "Route_protect";

    public static final String FUNC_GETDATA = "getData";

    public static final String FUNC_ACCESS_CONTROL = "Access_Control";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_ROUTE_ATTACK = "Route_Attack";

    protected Data_Sharing(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String Get_Data(String attributes) throws ContractException {
        final Function function = new Function(FUNC_GET_DATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attributes)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt Publish_Data(String _data) {
        final Function function = new Function(
                FUNC_PUBLISH_DATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Publish_Data(String _data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PUBLISH_DATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPublish_Data(String _data) {
        final Function function = new Function(
                FUNC_PUBLISH_DATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getPublish_DataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PUBLISH_DATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getPublish_DataOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_PUBLISH_DATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setData(String user, String _data) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setData(String user, String _data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetData(String user, String _data) {
        final Function function = new Function(
                FUNC_SETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetDataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSetDataOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt Route_protect(String port, String user) {
        final Function function = new Function(
                FUNC_ROUTE_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(port), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Route_protect(String port, String user, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ROUTE_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(port), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRoute_protect(String port, String user) {
        final Function function = new Function(
                FUNC_ROUTE_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(port), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRoute_protectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ROUTE_PROTECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getData(String user) throws ContractException {
        final Function function = new Function(FUNC_GETDATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean Access_Control(String attributes) throws ContractException {
        final Function function = new Function(FUNC_ACCESS_CONTROL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attributes)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt init(String user) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] init(String user, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInit(String user) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getInitInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt Route_Attack(String user, String port) {
        final Function function = new Function(
                FUNC_ROUTE_ATTACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(port)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] Route_Attack(String user, String port, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ROUTE_ATTACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(port)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRoute_Attack(String user, String port) {
        final Function function = new Function(
                FUNC_ROUTE_ATTACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(port)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRoute_AttackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ROUTE_ATTACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public static Data_Sharing load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Data_Sharing(contractAddress, client, credential);
    }

    public static Data_Sharing deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Data_Sharing.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
