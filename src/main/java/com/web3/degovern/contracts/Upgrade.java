package com.web3.degovern.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Upgrade extends Contract {
    public static final String[] BINARY_ARRAY = {"","","9050611f469190611f4a565b5090565b611f6c91905b80821115611f68576000816000905550600101611f50565b5090565b905600a165627a7a72305820e4f2732dc555fbb4b7203f9dfc5eb04540c8f6f8a2175dd5195d8e444f1c0dee0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","9050611f469190611f4a565b5090565b611f6c91905b80821115611f68576000816000905550600101611f50565b5090565b905600a165627a7a72305820e72041f27466362f846b8ec7f68537d302810cb872542bce04ce7e6aca1ab2c30029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"updateUserReputation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"name\":\"userName\",\"type\":\"string\"},{\"name\":\"userId\",\"type\":\"uint256\"},{\"name\":\"userReputation\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDappAddress\",\"type\":\"address\"}],\"name\":\"updateDappAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_newUserId\",\"type\":\"uint256\"}],\"name\":\"updateUserId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deGovern\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dappAddress\",\"type\":\"address\"}],\"name\":\"setDappAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dappUserAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_userName\",\"type\":\"string\"},{\"name\":\"_userId\",\"type\":\"uint256\"},{\"name\":\"_userReputation\",\"type\":\"uint256\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"chageUserName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserReputation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_deGovern\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATEUSERREPUTATION = "updateUserReputation";

    public static final String FUNC_USERINFO = "userInfo";

    public static final String FUNC_DAPPADDRESS = "dappAddress";

    public static final String FUNC_UPDATEDAPPADDRESS = "updateDappAddress";

    public static final String FUNC_GETUSERID = "getUserId";

    public static final String FUNC_UPDATEUSERID = "updateUserId";

    public static final String FUNC_DEGOVERN = "deGovern";

    public static final String FUNC_SETDAPPADDRESS = "setDappAddress";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_DAPPUSERADDRESS = "dappUserAddress";

    public static final String FUNC_SETUSERINFO = "setUserInfo";

    public static final String FUNC_CHAGEUSERNAME = "chageUserName";

    public static final String FUNC_GETUSERREPUTATION = "getUserReputation";

    public static final String FUNC_GETUSERNAME = "getUserName";

    public static final String FUNC_ADMIN = "admin";

    protected Upgrade(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt updateUserReputation(String _userAddress) {
        final Function function = new Function(
                FUNC_UPDATEUSERREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateUserReputation(String _userAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEUSERREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateUserReputation(String _userAddress) {
        final Function function = new Function(
                FUNC_UPDATEUSERREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUpdateUserReputationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEUSERREPUTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<String, BigInteger, BigInteger> userInfo(String param0) throws ContractException {
        final Function function = new Function(FUNC_USERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public String dappAddress() throws ContractException {
        final Function function = new Function(FUNC_DAPPADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt updateDappAddress(String _newDappAddress) {
        final Function function = new Function(
                FUNC_UPDATEDAPPADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_newDappAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateDappAddress(String _newDappAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEDAPPADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_newDappAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateDappAddress(String _newDappAddress) {
        final Function function = new Function(
                FUNC_UPDATEDAPPADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_newDappAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUpdateDappAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEDAPPADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getUserId(String _userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt updateUserId(String _userAddress, BigInteger _newUserId) {
        final Function function = new Function(
                FUNC_UPDATEUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_newUserId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] updateUserId(String _userAddress, BigInteger _newUserId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_newUserId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateUserId(String _userAddress, BigInteger _newUserId) {
        final Function function = new Function(
                FUNC_UPDATEUSERID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_newUserId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateUserIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEUSERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String deGovern() throws ContractException {
        final Function function = new Function(FUNC_DEGOVERN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setDappAddress(String _dappAddress) {
        final Function function = new Function(
                FUNC_SETDAPPADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_dappAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setDappAddress(String _dappAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETDAPPADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_dappAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetDappAddress(String _dappAddress) {
        final Function function = new Function(
                FUNC_SETDAPPADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_dappAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetDappAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDAPPADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<String, BigInteger, BigInteger> getUserInfo(String _userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETUSERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public String dappUserAddress() throws ContractException {
        final Function function = new Function(FUNC_DAPPUSERADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setUserInfo(String _userAddress, String _userName, BigInteger _userId, BigInteger _userReputation) {
        final Function function = new Function(
                FUNC_SETUSERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_userName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_userId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_userReputation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setUserInfo(String _userAddress, String _userName, BigInteger _userId, BigInteger _userReputation, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETUSERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_userName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_userId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_userReputation)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetUserInfo(String _userAddress, String _userName, BigInteger _userId, BigInteger _userReputation) {
        final Function function = new Function(
                FUNC_SETUSERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_userName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_userId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_userReputation)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, BigInteger> getSetUserInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETUSERINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt chageUserName(String _userAddress, String _newName) {
        final Function function = new Function(
                FUNC_CHAGEUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] chageUserName(String _userAddress, String _newName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHAGEUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChageUserName(String _userAddress, String _newName) {
        final Function function = new Function(
                FUNC_CHAGEUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getChageUserNameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHAGEUSERNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public BigInteger getUserReputation(String _userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETUSERREPUTATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getUserName(String _userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETUSERNAME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String admin() throws ContractException {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public static Upgrade load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Upgrade(contractAddress, client, credential);
    }

    public static Upgrade deploy(Client client, CryptoKeyPair credential, String _deGovern) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_deGovern)));
        return deploy(Upgrade.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }
}
