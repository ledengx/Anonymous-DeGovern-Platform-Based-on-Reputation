package com.web3.degovern.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint64;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Transfer extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","0083830152505050565b60005b83811015612f02578082015181840152602081019050612ee7565b83811115612f11576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582047a9a8b55f90ac49a27b63e4ba7c9d4cbda102fd6aa595a5739c59eeb24defa26c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","600083830152505050565b60005b83811015612f03578082015181840152602081019050612ee8565b83811115612f12576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820412606c2f0ce2352fcbfe4b339a26888c9809a4a28be5b7e78c8b69816a8a0d96c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getPresident\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getBalanceC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"num\",\"type\":\"uint64\"}],\"name\":\"transferMM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"order\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"double_protect\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"setGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"becomePresident1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"order_protect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"num\",\"type\":\"uint64\"}],\"name\":\"transferMM_protect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"},{\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"becomePresident\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"victim\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"reentrancy_protect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"attracker\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"time_protect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"victim\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"reentrancy_attrack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"order_attrack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reject_attrack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"Gas\",\"type\":\"uint64\"}],\"name\":\"order1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"}],\"name\":\"shopping\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reject_protect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"uint64\"}],\"name\":\"double_attrack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"setBalanceC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"attracker\",\"type\":\"string\"},{\"name\":\"now\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETPRESIDENT = "getPresident";

    public static final String FUNC_GETBALANCEC = "getBalanceC";

    public static final String FUNC_TRANSFERMM = "transferMM";

    public static final String FUNC_ORDER = "order";

    public static final String FUNC_DOUBLE_PROTECT = "double_protect";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_SETBALANCE = "setBalance";

    public static final String FUNC_SETGAS = "setGas";

    public static final String FUNC_BECOMEPRESIDENT1 = "becomePresident1";

    public static final String FUNC_ORDER_PROTECT = "order_protect";

    public static final String FUNC_GETGAS = "getGas";

    public static final String FUNC_TRANSFERMM_PROTECT = "transferMM_protect";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_COMPARESTR = "compareStr";

    public static final String FUNC_BECOMEPRESIDENT = "becomePresident";

    public static final String FUNC_REENTRANCY_PROTECT = "reentrancy_protect";

    public static final String FUNC_TIME_PROTECT = "time_protect";

    public static final String FUNC_REENTRANCY_ATTRACK = "reentrancy_attrack";

    public static final String FUNC_ORDER_ATTRACK = "order_attrack";

    public static final String FUNC_REJECT_ATTRACK = "reject_attrack";

    public static final String FUNC_ORDER1 = "order1";

    public static final String FUNC_SHOPPING = "shopping";

    public static final String FUNC_REJECT_PROTECT = "reject_protect";

    public static final String FUNC_DOUBLE_ATTRACK = "double_attrack";

    public static final String FUNC_SETBALANCEC = "setBalanceC";

    public static final String FUNC_WITHDRAW = "withdraw";

    protected Transfer(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String getPresident() throws ContractException {
        final Function function = new Function(FUNC_GETPRESIDENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getBalanceC(String id) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCEC, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt transferMM(String sender, String receiver, BigInteger amount, BigInteger num) {
        final Function function = new Function(
                FUNC_TRANSFERMM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferMM(String sender, String receiver, BigInteger amount, BigInteger num, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERMM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(num)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferMM(String sender, String receiver, BigInteger amount, BigInteger num) {
        final Function function = new Function(
                FUNC_TRANSFERMM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(num)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, BigInteger> getTransferMMInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERMM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt order(String sender, String receiver) {
        final Function function = new Function(
                FUNC_ORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] order(String sender, String receiver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOrder(String sender, String receiver) {
        final Function function = new Function(
                FUNC_ORDER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getOrderInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ORDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt double_protect(String account, BigInteger time) {
        final Function function = new Function(
                FUNC_DOUBLE_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] double_protect(String account, BigInteger time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DOUBLE_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(time)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDouble_protect(String account, BigInteger time) {
        final Function function = new Function(
                FUNC_DOUBLE_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDouble_protectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DOUBLE_PROTECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getDouble_protectOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DOUBLE_PROTECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getBalance(String id) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setBalance(String id, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setBalance(String id, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBalance(String id, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setGas(String id, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETGAS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setGas(String id, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGAS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGas(String id, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETGAS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetGasInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGAS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt becomePresident1(String sender, BigInteger price) {
        final Function function = new Function(
                FUNC_BECOMEPRESIDENT1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] becomePresident1(String sender, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BECOMEPRESIDENT1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(price)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBecomePresident1(String sender, BigInteger price) {
        final Function function = new Function(
                FUNC_BECOMEPRESIDENT1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(price)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getBecomePresident1Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BECOMEPRESIDENT1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt order_protect(String receiver) {
        final Function function = new Function(
                FUNC_ORDER_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] order_protect(String receiver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ORDER_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOrder_protect(String receiver) {
        final Function function = new Function(
                FUNC_ORDER_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getOrder_protectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ORDER_PROTECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getGas(String id) throws ContractException {
        final Function function = new Function(FUNC_GETGAS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt transferMM_protect(String sender, String receiver, BigInteger amount, BigInteger num) {
        final Function function = new Function(
                FUNC_TRANSFERMM_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferMM_protect(String sender, String receiver, BigInteger amount, BigInteger num, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERMM_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(num)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferMM_protect(String sender, String receiver, BigInteger amount, BigInteger num) {
        final Function function = new Function(
                FUNC_TRANSFERMM_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(num)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, BigInteger> getTransferMM_protectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERMM_PROTECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt transfer(String sender, String receiver, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transfer(String sender, String receiver, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String sender, String receiver, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt compareStr(String _str, String str) {
        final Function function = new Function(
                FUNC_COMPARESTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_str), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(str)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] compareStr(String _str, String str, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPARESTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_str), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(str)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompareStr(String _str, String str) {
        final Function function = new Function(
                FUNC_COMPARESTR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_str), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(str)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCompareStrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMPARESTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCompareStrOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_COMPARESTR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt becomePresident(String sender, BigInteger price) {
        final Function function = new Function(
                FUNC_BECOMEPRESIDENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] becomePresident(String sender, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BECOMEPRESIDENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(price)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBecomePresident(String sender, BigInteger price) {
        final Function function = new Function(
                FUNC_BECOMEPRESIDENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(price)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getBecomePresidentInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BECOMEPRESIDENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt reentrancy_protect(String sender, String victim, BigInteger amount) {
        final Function function = new Function(
                FUNC_REENTRANCY_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(victim), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reentrancy_protect(String sender, String victim, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REENTRANCY_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(victim), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReentrancy_protect(String sender, String victim, BigInteger amount) {
        final Function function = new Function(
                FUNC_REENTRANCY_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(victim), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getReentrancy_protectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REENTRANCY_PROTECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt time_protect(String sender, String attracker, Boolean result) {
        final Function function = new Function(
                FUNC_TIME_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attracker), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(result)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] time_protect(String sender, String attracker, Boolean result, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TIME_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attracker), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(result)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTime_protect(String sender, String attracker, Boolean result) {
        final Function function = new Function(
                FUNC_TIME_PROTECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attracker), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(result)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, Boolean> getTime_protectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TIME_PROTECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, Boolean>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public TransactionReceipt reentrancy_attrack(String sender, String victim, BigInteger amount) {
        final Function function = new Function(
                FUNC_REENTRANCY_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(victim), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reentrancy_attrack(String sender, String victim, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REENTRANCY_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(victim), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReentrancy_attrack(String sender, String victim, BigInteger amount) {
        final Function function = new Function(
                FUNC_REENTRANCY_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(victim), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getReentrancy_attrackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REENTRANCY_ATTRACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt order_attrack(String receiver) {
        final Function function = new Function(
                FUNC_ORDER_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] order_attrack(String receiver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ORDER_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOrder_attrack(String receiver) {
        final Function function = new Function(
                FUNC_ORDER_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getOrder_attrackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ORDER_ATTRACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt reject_attrack() {
        final Function function = new Function(
                FUNC_REJECT_ATTRACK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reject_attrack(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REJECT_ATTRACK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReject_attrack() {
        final Function function = new Function(
                FUNC_REJECT_ATTRACK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt order1(String sender, String receiver, BigInteger value, BigInteger Gas) {
        final Function function = new Function(
                FUNC_ORDER1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(Gas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] order1(String sender, String receiver, BigInteger value, BigInteger Gas, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ORDER1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(Gas)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOrder1(String sender, String receiver, BigInteger value, BigInteger Gas) {
        final Function function = new Function(
                FUNC_ORDER1, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(Gas)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, BigInteger> getOrder1Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ORDER1, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt shopping(String sender) {
        final Function function = new Function(
                FUNC_SHOPPING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] shopping(String sender, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SHOPPING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForShopping(String sender) {
        final Function function = new Function(
                FUNC_SHOPPING, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getShoppingInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SHOPPING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<String> getShoppingOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SHOPPING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt reject_protect() {
        final Function function = new Function(
                FUNC_REJECT_PROTECT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reject_protect(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REJECT_PROTECT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReject_protect() {
        final Function function = new Function(
                FUNC_REJECT_PROTECT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt double_attrack(String sender, BigInteger data) {
        final Function function = new Function(
                FUNC_DOUBLE_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] double_attrack(String sender, BigInteger data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DOUBLE_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(data)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDouble_attrack(String sender, BigInteger data) {
        final Function function = new Function(
                FUNC_DOUBLE_ATTRACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(data)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getDouble_attrackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DOUBLE_ATTRACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getDouble_attrackOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DOUBLE_ATTRACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setBalanceC(String id, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCEC, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setBalanceC(String id, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBALANCEC, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBalanceC(String id, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCEC, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetBalanceCInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBALANCEC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt withdraw(String sender, String attracker, BigInteger now) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attracker), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(now)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] withdraw(String sender, String attracker, BigInteger now, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attracker), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(now)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForWithdraw(String sender, String attracker, BigInteger now) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attracker), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint64(now)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getWithdrawInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getWithdrawOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_WITHDRAW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static Transfer load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Transfer(contractAddress, client, credential);
    }

    public static Transfer deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Transfer.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
