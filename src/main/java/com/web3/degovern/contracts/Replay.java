package com.web3.degovern.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Replay extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b506103e8600060405180807f416c69636500000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506064600060405180807f4f73636172000000000000000000000000000000000000000000000000000000815250600501905090815260200160405180910390208190555060008060405180807f626f62000000000000000000000000000000000000000000000000000000000081525060030190509081526020016040518091039020819055506201e240600260405180807f416c69636500000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506201e240600260405180807f4f7363617200000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506201e240600260405180807f626f62000000000000000000000000000000000000000000000000000000000081525060030190509081526020016040518091039020819055506000600360405180807f416c69636500000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506001600360405180807f4f7363617200000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506002600360405180807f626f62000000000000000000000000000000000000000000000000000000000081525060030190509081526020016040518091039020819055506109b18061028a6000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063356fdb731461006757806335ee5f87146100e457806389cda5a214610161578063f978fd61146102a7575b600080fd5b34801561007357600080fd5b506100ce600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506102f0565b6040518082815260200191505060405180910390f35b3480156100f057600080fd5b5061014b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610365565b6040518082815260200191505060405180910390f35b34801561016d57600080fd5b5061022c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190803590602001909291905050506103d9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561026c578082015181840152602081019050610251565b50505050905090810190601f1680156102995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b357600080fd5b506102d66004803603810190808035600019169060200190929190505050610965565b604051808215151515815260200191505060405180910390f35b60006003826040518082805190602001908083835b60208310151561032a5780518252602082019150602081019050602083039250610305565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b600080826040518082805190602001908083835b60208310151561039e5780518252602082019150602081019050602083039250610379565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b6060600080846002896040518082805190602001908083835b60208310151561041757805182526020820191506020810190506020830392506103f2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020541415156104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b836003896040518082805190602001908083835b6020831015156104f957805182526020820191506020810190506020830392506104d4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020541415156105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b6000886040518082805190602001908083835b6020831015156105da57805182526020820191506020810190506020830392506105b5565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549150858210156106ef576040805190810160405280600481526020017f4661696c000000000000000000000000000000000000000000000000000000008152506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106b4578082015181840152602081019050610699565b50505050905090810190601f1680156106e15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000876040518082805190602001908083835b6020831015156107275780518252602082019150602081019050602083039250610702565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054905080868201101561083e576040805190810160405280600481526020017f4661696c000000000000000000000000000000000000000000000000000000008152506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108035780820151818401526020810190506107e8565b50505050905090810190601f1680156108305780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8582036000896040518082805190602001908083835b6020831015156108795780518252602082019150602081019050602083039250610854565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055508581016000886040518082805190602001908083835b6020831015156108eb57805182526020820191506020810190506020830392506108c6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506040805190810160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152509250505095945050505050565b60016020528060005260406000206000915054906101000a900460ff16815600a165627a7a7230582000cf5668b21737d9fc9dd32d67fba8f42502a6b87c8fa6fd43d54990afdbdaf80029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b506103e8600060405180807f416c69636500000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506064600060405180807f4f73636172000000000000000000000000000000000000000000000000000000815250600501905090815260200160405180910390208190555060008060405180807f626f62000000000000000000000000000000000000000000000000000000000081525060030190509081526020016040518091039020819055506201e240600260405180807f416c69636500000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506201e240600260405180807f4f7363617200000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506201e240600260405180807f626f62000000000000000000000000000000000000000000000000000000000081525060030190509081526020016040518091039020819055506000600360405180807f416c69636500000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506001600360405180807f4f7363617200000000000000000000000000000000000000000000000000000081525060050190509081526020016040518091039020819055506002600360405180807f626f62000000000000000000000000000000000000000000000000000000000081525060030190509081526020016040518091039020819055506109b18061028a6000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806339b33d0f146100675780638025e846146100e4578063cd93c25d1461022a578063fe4f8502146102a7575b600080fd5b34801561007357600080fd5b506100ce600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506102f0565b6040518082815260200191505060405180910390f35b3480156100f057600080fd5b506101af600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190505050610365565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ef5780820151818401526020810190506101d4565b50505050905090810190601f16801561021c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023657600080fd5b50610291600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506108f1565b6040518082815260200191505060405180910390f35b3480156102b357600080fd5b506102d66004803603810190808035600019169060200190929190505050610965565b604051808215151515815260200191505060405180910390f35b60006003826040518082805190602001908083835b60208310151561032a5780518252602082019150602081019050602083039250610305565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b6060600080846002896040518082805190602001908083835b6020831015156103a3578051825260208201915060208101905060208303925061037e565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205414151561044c576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b836003896040518082805190602001908083835b6020831015156104855780518252602082019150602081019050602083039250610460565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205414151561052e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206e6f6e63650000000000000000000000000000000000000081525060200191505060405180910390fd5b6000886040518082805190602001908083835b6020831015156105665780518252602082019150602081019050602083039250610541565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205491508582101561067b576040805190810160405280600481526020017f4661696c000000000000000000000000000000000000000000000000000000008152506040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610640578082015181840152602081019050610625565b50505050905090810190601f16801561066d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000876040518082805190602001908083835b6020831015156106b3578051825260208201915060208101905060208303925061068e565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205490508086820110156107ca576040805190810160405280600481526020017f4661696c000000000000000000000000000000000000000000000000000000008152506040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561078f578082015181840152602081019050610774565b50505050905090810190601f1680156107bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8582036000896040518082805190602001908083835b60208310151561080557805182526020820191506020810190506020830392506107e0565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055508581016000886040518082805190602001908083835b6020831015156108775780518252602082019150602081019050602083039250610852565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506040805190810160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152509250505095945050505050565b600080826040518082805190602001908083835b60208310151561092a5780518252602082019150602081019050602083039250610905565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b60016020528060005260406000206000915054906101000a900460ff16815600a165627a7a723058205a987989a6061709ee187f2cd856c1246e35d769c4559885e85fd82a74df78140029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_user1\",\"type\":\"string\"}],\"name\":\"getnonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"string\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"string\"},{\"name\":\"_receiver\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETNONCE = "getnonce";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_USEDSIGNATURES = "usedSignatures";

    protected Replay(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getnonce(String _user1) throws ContractException {
        final Function function = new Function(FUNC_GETNONCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_user1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger balanceOf(String _account) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt transfer(String _sender, String _receiver, BigInteger _amount, BigInteger _signature, BigInteger _nonce) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_signature), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_nonce)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transfer(String _sender, String _receiver, BigInteger _amount, BigInteger _signature, BigInteger _nonce, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_signature), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_nonce)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String _sender, String _receiver, BigInteger _amount, BigInteger _signature, BigInteger _nonce) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sender), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_signature), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_nonce)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> getTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<String> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean usedSignatures(byte[] param0) throws ContractException {
        final Function function = new Function(FUNC_USEDSIGNATURES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public static Replay load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Replay(contractAddress, client, credential);
    }

    public static Replay deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Replay.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
